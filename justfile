#!/usr/bin/env just --justfile

main_crate := 'varnish'
default_varnish_ver := '7.7'  # which version of Varnish to install by default
supported_varnish_vers := default_varnish_ver + '  7.7.0  7.6  7.5  6.0'  # Make sure to update CI with the changes

# if running in CI, treat warnings as errors by setting RUSTFLAGS and RUSTDOCFLAGS to '-D warnings' unless they are already set
# Use `CI=true just ci-test` to run the same tests as in GitHub CI.
# Use `just env-info` to see the current values of RUSTFLAGS and RUSTDOCFLAGS
ci_mode := if env('CI', '') != '' {'1'} else {''}
export RUSTFLAGS := env('RUSTFLAGS', if ci_mode == '1' {'-D warnings'} else {''})
export RUSTDOCFLAGS := env('RUSTDOCFLAGS', if ci_mode == '1' {'-D warnings'} else {''})
export RUST_BACKTRACE := env('RUST_BACKTRACE', if ci_mode == '1' {'1'} else {''})

@_default:
    {{just_executable()}} --list

# Run integration tests and save its output as the new expected output
@bless *args='-p varnish-macros -p varnish':  (cargo-install 'cargo-insta')
    # Ignore unreferenced snapshots because they are generated by different Varnish versions
    @TRYBUILD=overwrite cargo insta test --accept --unreferenced=ignore {{args}}

# Run tests on all targets listed in CI, and accept their results
bless-all:
    rm -rf varnish/snapshots*
    for ver in {{supported_varnish_vers}}; do \
        echo "--------- Updating test results for Varnish $ver" ;\
        {{just_executable()}} docker-run $ver "just bless" ;\
    done

# Build the project
build:
    cargo build --workspace --all-targets $({{just_executable()}} get-package-exclude-args)

# build all
build-all-features:
    cargo build --workspace --all-targets $({{just_executable()}} get-package-exclude-args) --features "ffi"

# Quick compile
check:
    cargo check --workspace --all-targets $({{just_executable()}} get-package-exclude-args)

# Check that the current version of the crate is not the same as the one published on crates.io
check-all-if-published: \
    (check-if-published 'varnish') \
    (check-if-published 'varnish-macros') \
    (check-if-published 'varnish-sys')

# Verify that the current version of the crate is not the same as the one published on crates.io
check-if-published package=main_crate:  (assert-cmd 'jq')
    #!/usr/bin/env bash
    set -euo pipefail
    LOCAL_VERSION="$({{just_executable()}} get-crate-field version package)"
    echo "Detected crate {{package}} version:  '$LOCAL_VERSION'"
    PUBLISHED_VERSION="$(cargo search --quiet {{package}} | grep "^{{package}} =" | sed -E 's/.* = "(.*)".*/\1/')"
    echo "Published crate version: '$PUBLISHED_VERSION'"
    if [ "$LOCAL_VERSION" = "$PUBLISHED_VERSION" ]; then
        echo "ERROR: The current crate version has already been published."
        exit 1
    else
        echo "The current crate version has not yet been published."
    fi

# Generate code coverage report to upload to codecov.io
ci-coverage: env-info && \
            (coverage '--codecov --output-path target/llvm-cov/codecov.info')
    # ATTENTION: the full file path above is used in the CI workflow
    mkdir -p target/llvm-cov

# Run all tests as expected by CI
ci-test: env-info test-fmt build-all-features clippy test && assert-git-is-clean

# Run tests only relevant to the latest Varnish version
ci-test-latest: ci-test test-doc test-doc-build

# Run minimal subset of tests to ensure compatibility with MSRV
ci-test-msrv: env-info test

# Clean all build artifacts
clean:
    cargo clean
    rm -f Cargo.lock

# Run cargo clippy to lint the code
clippy *args:
    cargo clippy --workspace --all-targets $({{just_executable()}} get-package-exclude-args) {{args}}

# Generate code coverage report. Will install `cargo llvm-cov` if missing.
coverage *args='--no-clean --open':  (cargo-install 'cargo-llvm-cov')
    #!/usr/bin/env bash
    set -euo pipefail
    find . -name '*.profraw' | xargs rm
    rm -rf ./target/debug/coverage
    export LLVM_PROFILE_FILE="varnish-%p-%m.profraw"
    export RUSTFLAGS="-Cinstrument-coverage"
    cargo build --workspace --all-targets
    cargo test --workspace --all-targets
    grcov . -s . --binary-path ./target/debug/ -t html --branch --ignore-not-existing -o ./target/debug/coverage/
    open ./target/debug/coverage/index.html
    #
    # TODO: use llvm-cov instead:
    # cargo llvm-cov --workspace --all-targets --include-build-script $({{just_executable()}} get-package-exclude-args) {{args}}

docker-run version=default_varnish_ver *args='':  (docker-build-ver version) (docker-run-ver version args)

# Build and open code documentation
docs:
    DOCS_RS=1 cargo doc --no-deps --open

# Print environment info
env-info:
    @echo "Running {{if ci_mode == '1' {'in CI mode'} else {'in dev mode'} }} on {{os()}} / {{arch()}}"
    {{just_executable()}} --version
    rustc --version
    cargo --version
    rustup --version
    @echo "RUSTFLAGS='$RUSTFLAGS'"
    @echo "RUSTDOCFLAGS='$RUSTDOCFLAGS'"

# Reformat all code `cargo fmt`. If nightly is available, use it for better results
fmt:
    #!/usr/bin/env bash
    set -euo pipefail
    if rustup component list --toolchain nightly | grep rustfmt &> /dev/null; then
        echo 'Reformatting Rust code using nightly Rust fmt to sort imports'
        cargo +nightly fmt --all -- --config imports_granularity=Module,group_imports=StdExternalCrate
    else
        echo 'Reformatting Rust with the stable cargo fmt.  Install nightly with `rustup install nightly` for better results'
        cargo fmt --all
    fi

# Get any package's field from the metadata
get-crate-field field package=main_crate:
    cargo metadata --format-version 1 | jq -r '.packages | map(select(.name == "{{package}}")) | first | .{{field}}'

# Get the minimum supported Rust version (MSRV) for the crate
get-msrv:  (get-crate-field 'rust_version')

# Get the version of Varnish installed on the system. If a version arg is provided, check that the installed version is at least that version.
get-varnish-version $required_version='':
    #!/usr/bin/env bash
    set -euo pipefail
    VARNISH_VER=$(dpkg-query -W -f='${source:Upstream-Version}\n' varnish-dev || echo "unknown")
    if [ -n "$required_version" ]; then
        if [ "$(printf "$required_version\n$VARNISH_VER" | sort -V | head -n1)" != "$required_version" ]; then
            echo "ERROR: Varnish version $required_version is required, but $VARNISH_VER is installed."
            exit 1
        else
            echo "Found varnish-dev package v$VARNISH_VER >= $required_version"
        fi
    elif [ "$VARNISH_VER" = "unknown" ]; then
        echo "ERROR: varnish-dev package was not found"
        exit 1
    else
        echo "Found varnish-dev package v$VARNISH_VER"
    fi

# Find the minimum supported Rust version (MSRV) using cargo-msrv extension, and update Cargo.toml
msrv:  (cargo-install 'cargo-msrv')
    cargo msrv find --write-msrv --min 1.77 --component rustfmt -- {{just_executable()}} ci-test-msrv

# Publish crates to crates.io in the right order
publish:
    cargo publish -p varnish-sys
    cargo publish -p varnish-macros
    cargo publish -p varnish

# Check semver compatibility with prior published version. Install it with `cargo install cargo-semver-checks`
semver *args:
    cargo semver-checks {{args}}

# Run all tests
test *args: build
    cargo test --workspace --all-targets $({{just_executable()}} get-package-exclude-args) {{args}}

# Test documentation
test-doc:
    cargo test --doc --workspace

# Test doc building on docs.rs
test-doc-build:
    DOCS_RS=1 cargo doc --no-deps --workspace

# Test code formatting
test-fmt:
    cargo fmt --all -- --check

# Use the experimental workspace publishing with --dry-run. Requires nightly Rust.
test-publish:
    cargo +nightly -Z package-workspace publish --dry-run

# Find unused dependencies. Install it with `cargo install cargo-udeps`
udeps:  (cargo-install 'cargo-udeps')
    cargo +nightly udeps --workspace --all-targets

# Update all dependencies, including breaking changes. Requires nightly toolchain (install with `rustup install nightly`)
update:
    cargo +nightly -Z unstable-options update --breaking
    cargo update

# Ensure version is valid and convert it to an apt package search string. Assumes all version parts are one digit. Two digits are treated as (major.minor).
@version-to-apt-pattern version=default_varnish_ver:
    {{ if replace_regex(version, '^(\d\d|\d(\.\d)?(\.\d)?)$', '') != '' { error('Invalid version "' + version + '"') } else {''} }}
    echo "{{ \
        replace_regex(replace_regex(replace_regex(version, \
              '^(\d)(\d)$', '$1.$2') \
            , '^(\d\.\d\.\d)$', '$1-*') \
            , '^(\d(\.\d)*)$', '$1.*') \
    }}"

# Ensure version is valid and convert it to a tag name, e.g. 60 or 6.0 -> varnish60lts and 7.1 -> varnish71. Assumes all parts are one digit. Two digits are treated as (major.minor).
@version-to-tag version=default_varnish_ver:
    {{ if replace_regex(version, '^(\d\d|\d(\.\d)?(\.\d)?)$', '') != '' { error('Invalid version "' + version + '"') } else {''} }}
    echo "{{ \
        'varnish' + replace_regex(replace_regex(replace_regex(replace_regex(replace_regex(version, \
              '^(\d)(\d)$', '$1.$2') \
            , '(^\d\.\d)(\..*)$', '$1') \
            , '^(\d)$', '$1.0') \
            , '^(\d)\.(\d)$', '$1$2') \
            , '^60$', '60lts') \
    }}"

# Ensure that a certain command is available
[private]
assert-cmd command:
    @if ! type {{command}} > /dev/null; then \
        echo "Command '{{command}}' could not be found. Please make sure it has been installed on your computer." ;\
        exit 1 ;\
    fi

# Make sure the git repo has no uncommitted changes
[private]
assert-git-is-clean:
    @if [ -n "$(git status --untracked-files --porcelain)" ]; then \
      >&2 echo "ERROR: git repo is no longer clean. Make sure compilation and tests artifacts are in the .gitignore, and no repo files are modified." ;\
      >&2 echo "######### git status ##########" ;\
      git status ;\
      git --no-pager diff ;\
      exit 1 ;\
    fi

# Check if a certain Cargo command is installed, and install it if needed
[private]
cargo-install $COMMAND $INSTALL_CMD='' *args='':
    #!/usr/bin/env bash
    set -euo pipefail
    if ! command -v $COMMAND > /dev/null; then
        if ! command -v cargo-binstall > /dev/null; then
            echo "$COMMAND could not be found. Installing it with    cargo install ${INSTALL_CMD:-$COMMAND} --locked {{args}}"
            cargo install ${INSTALL_CMD:-$COMMAND} --locked {{args}}
        else
            echo "$COMMAND could not be found. Installing it with    cargo binstall ${INSTALL_CMD:-$COMMAND} --locked {{args}}"
            cargo binstall ${INSTALL_CMD:-$COMMAND} --locked {{args}}
        fi
    fi

# Build a Docker image with the given Varnish version
[private]
docker-build-ver version=default_varnish_ver:
    docker build \
           --progress=plain \
           -t "varnish-img-{{version}}" \
           {{ '--build-arg VARNISH_VERSION=' + version }} \
           --build-arg USER_UID=$(id -u) \
           --build-arg USER_GID=$(id -g) \
           -f docker/Dockerfile \
           .

# Start docker container with the given varnish version
[private]
docker-run-ver version *args:
    mkdir -p docker/.cache/{{version}}
    touch docker/.cache/{{version}}/.bash_history
    docker run --rm -it \
        -v "$PWD:/app/" \
        -v "$PWD/docker/.cache/{{version}}:/home/user/.cache" \
        -v "$PWD/docker/.cache/{{version}}/.bash_history:/home/user/.bash_history" \
        varnish-img-{{version}} {{args}}

# Get the `--exclude <SPEC>` parameter for the cargo build/test/... command, depending on the installed version of Varnish
[private]
get-package-exclude-args:
    #!/usr/bin/env bash
    set -euo pipefail
    if {{just_executable()}} get-varnish-version 7.0 > /dev/null 2> /dev/null ; then
        echo ""
    else
        EXCLUDE="--exclude vmod_be --exclude vmod_vfp --exclude vmod_vdp --exclude vmod_test"
        >&2 echo "INFO: Due to older Varnish, running with: $EXCLUDE"
        echo "$EXCLUDE"
    fi

# Install Varnish from packagecloud.io. This could be damaging to your system - use with caution.
[private]
install-varnish version=default_varnish_ver:
    #!/usr/bin/env bash
    set -euo pipefail
    TAG="$({{just_executable()}} version-to-tag {{quote(version)}})"
    PATTERN="$({{just_executable()}} version-to-apt-pattern {{quote(version)}})"
    echo "Installing Varnish '{{version}}' (tag='$TAG', pattern='$PATTERN') from packagecloud.io"
    curl -sSf "https://packagecloud.io/install/repositories/varnishcache/$TAG/script.deb.sh" | sudo bash
    echo -e 'Package: varnish varnish-dev\nPin: origin "packagecloud.io"\nPin-Priority: 1001' | sudo tee /etc/apt/preferences.d/varnish
    cat /etc/apt/preferences.d/varnish
    sudo apt-cache policy varnish
    sudo apt-get install -y "varnish=$PATTERN" "varnish-dev=$PATTERN"
